<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* Recommend42/Repository/RecommendProductRepository.php */
class __TwigTemplate_728dcbaec388d2c47e312666b00177ab extends \Eccube\Twig\Template
{
    private $source;
    private $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->parent = false;

        $this->blocks = [
        ];
        $this->sandbox = $this->env->getExtension('\Twig\Extension\SandboxExtension');
        $this->checkSecurity();
    }

    protected function doDisplay(array $context, array $blocks = [])
    {
        $macros = $this->macros;
        // line 1
        echo "<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\\Recommend42\\Repository;

use Eccube\\Entity\\Master\\ProductStatus;
use Eccube\\Repository\\AbstractRepository;
use Plugin\\Recommend42\\Entity\\RecommendProduct;
use Doctrine\\Persistence\\ManagerRegistry; 

/**
 * RecommendProductRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecommendProductRepository extends AbstractRepository
{
    /**
     * CouponRepository constructor.
     *
     * @param ManagerRegistry \$registry
     */
    public function __construct(ManagerRegistry \$registry)
    {
        parent::__construct(\$registry, RecommendProduct::class);
    }

    /**
     * Find list.
     *
     * @return mixed
     */
    public function getRecommendList()
    {
        \$qb = \$this->createQueryBuilder('rp')
            ->innerJoin('rp.Product', 'p');
        \$qb->where('rp.visible = true');
        \$qb->addOrderBy('rp.sort_no', 'DESC');

        return \$qb->getQuery()->getResult();
    }

    /**
     * Get max rank.
     *
     * @return mixed
     *
     * @throws \\Doctrine\\ORM\\NoResultException
     * @throws \\Doctrine\\ORM\\NonUniqueResultException
     */
    public function getMaxRank()
    {
        \$qb = \$this->createQueryBuilder('rp')
            ->select('MAX(rp.sort_no) AS max_rank');

        return \$qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get recommend product by display status of product.
     *
     * @return array
     */
    public function getRecommendProduct()
    {
        \$query = \$this->createQueryBuilder('rp')
            ->innerJoin('Eccube\\Entity\\Product', 'p', 'WITH', 'p.id = rp.Product')
            ->where('p.Status = :Disp')
            ->andWhere('rp.visible = true')
            ->orderBy('rp.sort_no', 'DESC')
            ->setParameter('Disp', ProductStatus::DISPLAY_SHOW)
            ->getQuery();

        return \$query->getResult();
    }

    /**
     * Number of recommend.
     *
     * @return mixed
     *
     * @throws \\Doctrine\\ORM\\NoResultException
     * @throws \\Doctrine\\ORM\\NonUniqueResultException
     */
    public function countRecommend()
    {
        \$qb = \$this->createQueryBuilder('rp');
        \$qb->select('COUNT(rp)');

        return \$qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Move rank.
     *
     * @param array \$arrRank
     *
     * @return array
     *
     * @throws \\Exception
     */
    public function moveRecommendRank(array \$arrRank)
    {
        \$this->getEntityManager()->beginTransaction();
        \$arrRankMoved = [];
        try {
            foreach (\$arrRank as \$recommendId => \$rank) {
                /* @var \$Recommend RecommendProduct */
                \$Recommend = \$this->find(\$recommendId);
                if (\$Recommend->getSortno() == \$rank) {
                    continue;
                }
                \$arrRankMoved[\$recommendId] = \$rank;
                \$Recommend->setSortno(\$rank);
                \$this->getEntityManager()->persist(\$Recommend);
            }
            \$this->getEntityManager()->flush();
            \$this->getEntityManager()->commit();
        } catch (\\Exception \$e) {
            \$this->getEntityManager()->rollback();
            throw \$e;
        }

        return \$arrRankMoved;
    }

    /**
     * Save recommend.
     *
     * @param RecommendProduct \$RecommendProduct
     *
     * @return bool
     *
     * @throws \\Exception
     */
    public function saveRecommend(RecommendProduct \$RecommendProduct)
    {
        \$this->getEntityManager()->beginTransaction();
        try {
            \$this->getEntityManager()->persist(\$RecommendProduct);
            \$this->getEntityManager()->flush(\$RecommendProduct);
            \$this->getEntityManager()->commit();
        } catch (\\Exception \$e) {
            \$this->getEntityManager()->rollback();
            throw \$e;
        }

        return true;
    }

    /**
     * Get all id of recommend product.
     *
     * @return array
     */
    public function getRecommendProductIdAll()
    {
        \$query = \$this->createQueryBuilder('rp')
            ->select('IDENTITY(rp.Product) as id')
            ->where('rp.visible = true')
            ->getQuery();
        \$arrReturn = \$query->getScalarResult();

        return array_map('current', \$arrReturn);
    }

    /**
     * おすすめ商品情報を削除する
     *
     * @param RecommendProduct \$RecommendProduct
     *
     * @return bool
     *
     * @throws \\Exception
     */
    public function deleteRecommend(RecommendProduct \$RecommendProduct)
    {
        // おすすめ商品情報を書き換える
        \$RecommendProduct->setVisible(false);

        // おすすめ商品情報を登録する
        return \$this->saveRecommend(\$RecommendProduct);
    }
}
";
    }

    public function getTemplateName()
    {
        return "Recommend42/Repository/RecommendProductRepository.php";
    }

    public function getDebugInfo()
    {
        return array (  39 => 1,);
    }

    public function getSourceContext()
    {
        return new Source("", "Recommend42/Repository/RecommendProductRepository.php", "/var/www/html/app/Plugin/Recommend42/Repository/RecommendProductRepository.php");
    }
    
    public function checkSecurity()
    {
        static $tags = array();
        static $filters = array();
        static $functions = array();

        try {
            $this->sandbox->checkSecurity(
                [],
                [],
                []
            );
        } catch (SecurityError $e) {
            $e->setSourceContext($this->source);

            if ($e instanceof SecurityNotAllowedTagError && isset($tags[$e->getTagName()])) {
                $e->setTemplateLine($tags[$e->getTagName()]);
            } elseif ($e instanceof SecurityNotAllowedFilterError && isset($filters[$e->getFilterName()])) {
                $e->setTemplateLine($filters[$e->getFilterName()]);
            } elseif ($e instanceof SecurityNotAllowedFunctionError && isset($functions[$e->getFunctionName()])) {
                $e->setTemplateLine($functions[$e->getFunctionName()]);
            }

            throw $e;
        }

    }
}
