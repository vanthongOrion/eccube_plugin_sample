<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* Securitychecker42/Repository/ConfigRepository.php */
class __TwigTemplate_c2ffbbd388389a314b6d88346155e7af extends \Eccube\Twig\Template
{
    private $source;
    private $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->parent = false;

        $this->blocks = [
        ];
        $this->sandbox = $this->env->getExtension('\Twig\Extension\SandboxExtension');
        $this->checkSecurity();
    }

    protected function doDisplay(array $context, array $blocks = [])
    {
        $macros = $this->macros;
        // line 1
        echo "<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\\Securitychecker42\\Repository;

use Eccube\\Repository\\AbstractRepository;
use Plugin\\Securitychecker42\\Entity\\Config;
use Doctrine\\Persistence\\ManagerRegistry; 

/**
 * ConfigRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConfigRepository extends AbstractRepository
{
    /**
     * @param ManagerRegistry \$registry
     */
    public function __construct(ManagerRegistry \$registry)
    {
        parent::__construct(\$registry, Config::class);
    }

    /**
     * チェック結果を保存します.
     *
     * @param string \$checkResult チェック結果の JSON 文字列
     */
    public function saveCheckResult(\$checkResult)
    {
        /** @var Config \$Config */
        \$Config = \$this->findOneBy(['id' => Config::DEFAULT_ID]);

        if (!\$Config) {
            \$Config = new Config();
            \$Config->setCheckResult(\$checkResult);
            \$this->getEntityManager()->persist(\$Config);
        } else {
            \$Config->setCheckResult(\$checkResult);
        }
        \$this->getEntityManager()->flush(\$Config);
    }

    /**
     * 前回のチェック結果を取得します.
     *
     * @return array チェック結果の連想配列
     */
    public function getCheckResult()
    {
        /** @var Config \$Config */
        \$Config = \$this->findOneBy(['id' => Config::DEFAULT_ID]);

        if (!\$Config) {
            return [];
        }

        return json_decode(\$Config->getCheckResult(), true);
    }
}
";
    }

    public function getTemplateName()
    {
        return "Securitychecker42/Repository/ConfigRepository.php";
    }

    public function getDebugInfo()
    {
        return array (  39 => 1,);
    }

    public function getSourceContext()
    {
        return new Source("", "Securitychecker42/Repository/ConfigRepository.php", "/var/www/html/app/Plugin/Securitychecker42/Repository/ConfigRepository.php");
    }
    
    public function checkSecurity()
    {
        static $tags = array();
        static $filters = array();
        static $functions = array();

        try {
            $this->sandbox->checkSecurity(
                [],
                [],
                []
            );
        } catch (SecurityError $e) {
            $e->setSourceContext($this->source);

            if ($e instanceof SecurityNotAllowedTagError && isset($tags[$e->getTagName()])) {
                $e->setTemplateLine($tags[$e->getTagName()]);
            } elseif ($e instanceof SecurityNotAllowedFilterError && isset($filters[$e->getFilterName()])) {
                $e->setTemplateLine($filters[$e->getFilterName()]);
            } elseif ($e instanceof SecurityNotAllowedFunctionError && isset($functions[$e->getFunctionName()])) {
                $e->setTemplateLine($functions[$e->getFunctionName()]);
            }

            throw $e;
        }

    }
}
